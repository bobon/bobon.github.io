<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>centos/Yum设置</title>
      <link href="/2022/06/19/centos/Yum%E8%AE%BE%E7%BD%AE/"/>
      <url>/2022/06/19/centos/Yum%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>每周一个linux命令（yum）</p><p><a href="https://author.baidu.com/home?from=bjh_article&amp;app_id=1716908681770531"><img src="https://pic.rmb.bdstatic.com/bjh/user/18229cf6bc8d50d9e9d1da7e8bab06aa.jpeg?x-bce-process=image/resize,m_lfit,w_200,h_200&amp;autime=10718" alt=""></a></p><p>关注</p><h3 id="基础环境">基础环境</h3><h3 id="yum命令介绍">yum命令介绍</h3><p>yum 是一个交互式的、基于 rpm 的包管理器，是一种联网安装软件的方式。它可以安装软件、卸载软件、查询软件、更新软件以及系统、自动解决rpm包依赖问题。</p><h3 id="yum常用参数介绍">yum常用参数介绍</h3><p>-y:代替手动输入yes，自动执行安装<br>install:安装软件<br>makecache:更新软件包缓存</p><h3 id="yum软件源">yum软件源</h3><h3 id="yum软件源配置">yum软件源配置</h3><h3 id="yum软件源配置文件路径">yum软件源配置文件路径</h3><h3 id="yum软件源分类">yum软件源分类</h3><ol><li><p>官方软件源，例如：centos、epel</p></li><li><p>第三方软件源，例如：阿里云镜像源、华为云镜像源、清华大学镜像源等</p></li><li><p>单个软件源，指不存在公共仓库里的软件，使用自己仓库的软件源，例如：nginx、mysql</p></li></ol><h3 id="阿里云官方镜像站">阿里云官方镜像站</h3><h3 id="点击centos">点击centos</h3><h3 id="备份旧的软件源配置文件">备份旧的软件源配置文件</h3><p>mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</p><p>防止新的软件源文件无法使用，导致系统无法安装软件，需要提前备份软件源配置文件，操作配置文件前备份是一个好的习惯。</p><h3 id="下载软件源配置文件">下载软件源配置文件</h3><p>curl -o /etc/yum.repos.d/CentOS-Base.repo <a href="https://mirrors.aliyun.com/repo/Centos-7.repo">https://mirrors.aliyun.com/repo/Centos-7.repo</a></p><h3 id="yum软件源更新">yum软件源更新</h3><p>配置完需要更新本地的软件源仓库，更新后即可使用最新的软件源，安装软件</p><h3 id="yum源验证成功">yum源验证成功</h3><h3 id="yum查找软件包">yum查找软件包</h3><h3 id="yum查找你要安装软件名称">yum查找你要安装软件名称</h3><ol><li><p>通过软件官网查找安装教程，例如：nginx</p></li><li><p>通过搜索引擎搜索，例如：搜索MySQL关键字：yum nginx 安装 centos 7</p></li><li><p>通过yum search搜索，例如：yum search nginx</p></li></ol><p>推荐第一种，少走弯路，你能搜索到的，官网都有，并且质量高</p><h3 id="yum安装软件">yum安装软件</h3><p>yum install epel-release -yyum install nginx -y</p><h3 id="yum软件卸载">yum软件卸载</h3><h3 id="删除软件">删除软件</h3><h3 id="自动删除软件以及软件所带的依赖">自动删除软件以及软件所带的依赖</h3><h3 id="yum软件更新">yum软件更新</h3><h3 id="更新一个软件">更新一个软件</h3><h3 id="更新系统所有软件">更新系统所有软件</h3><h3 id="yum缓存文件">yum缓存文件</h3><h3 id="开启软件缓存">开启软件缓存</h3><p>将keepcache=0改为keepcache=1，保存后立即生效无需重启。</p><h3 id="查找缓存文件">查找缓存文件</h3><h3 id="清理缓存文件">清理缓存文件</h3><p>如果想提取一个软件的离线安装包，则每次安装完后，清理缓存即可。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux/性能优化/perf/probe/perf probe实例</title>
      <link href="/2022/06/19/linux/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/perf/probe/perf%20probe%E5%AE%9E%E4%BE%8B/"/>
      <url>/2022/06/19/linux/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/perf/probe/perf%20probe%E5%AE%9E%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p>Define new dynamic tracepoints，This command defines dynamic tracepoint events, by symbol and registers without debuginfo, or by C expressions (C line numbers, C function names, and C local variables) with debuginfo.<br>动态跟踪的一些实例：</p><h2 id="1-perf-probe-L-do-sys-open">1. perf probe -L do_sys_open</h2><p>Show source code lines which can be probed</p><p>root@jianlin-100:/home/jianlin# perf probe -L do_sys_open<br>      0  long do_sys_open(int dfd, const char __user *filename, int flags, umode_t mode)<br>         {<br>      2         struct open_how how = build_open_how(flags, mode);<br>      3         return do_sys_openat2(dfd, filename, &amp;how);<br>         }</p><h2 id="2-perf-probe-V">2. perf probe -V</h2><p>Show available local variables at given probe point.<br>显示可以被跟踪的局部变量；</p><p>root@jianlin-100:/home/jianlin# perf probe -V do_sys_open<br>Available variables at do_sys_open<br>        @                char*   filename<br>                int     dfd<br>                int     flags<br>                struct open_how how<br>                umode_t mode</p><h2 id="3-perf-probe-a">3. perf probe -a</h2><p>Define a probe event (see PROBE SYNTAX for detail).<br>定义了一个动态event； 选中filename，并以字符串格式输出；</p><p>root@jianlin-100:/home/jianlin# perf probe -a ‘do_sys_open filename:string’<br>Added new event:<br>  probe:do_sys_open    (on do_sys_open with filename:string)</p><p>You can now use it in all perf tools, such as:</p><p>perf record -e probe:do_sys_open -aR sleep 1</p><h2 id="4-perf-record">4. perf record</h2><p>root@jianlin-100:/home/jianlin# perf record -e probe:do_sys_open -aR cat ./kube-join.info &gt; /dev/null<br>cat: ./kube-join.info: No such file or directory<br>[ perf record: Woken up 1 times to write data ]<br>[ perf record: Captured and wrote 0.180 MB perf.data (18 samples) ]</p><h2 id="5-显示trace的输出">5. 显示trace的输出</h2><p>display trace output</p><p>首先是perf report --stdio，貌似看不出来什么</p><p>root@jianlin-100:/home/jianlin# perf report --stdio<br># To display the perf.data header info, please use --header/–header-only options.</p><p># Total Lost Samples: 0</p><p># Samples: 18  of event ‘probe:do_sys_open’<br># Event count (approx.): 18</p><p># Overhead  Command  Shared Object     Symbol<br># …  …  …  …</p><p>94.44%  cat      [kernel.vmlinux]  [k] do_sys_open<br>     5.56%  perf     [kernel.vmlinux]  [k] do_sys_open</p><p>使用perf  script试试：</p><p>root@jianlin-100:/home/jianlin# perf  script<br>            perf 3559160 [007] 1710448.751491: probe:do_sys_open: (ffff800010368e20) filename_string=“/proc/3559161/status”<br>             cat 3559161 [001] 1710448.752954: probe:do_sys_open: (ffff800010368e20) filename_string=“/etc/ld.so.cache”<br>             cat 3559161 [001] 1710448.752993: probe:do_sys_open: (ffff800010368e20) filename_string=“/lib/aarch64-linux-gnu/libc.so.6”<br>             cat 3559161 [001] 1710448.753307: probe:do_sys_open: (ffff800010368e20) filename_string=“/usr/lib/locale/locale-archive”<br>             cat 3559161 [001] 1710448.753397: probe:do_sys_open: (ffff800010368e20) filename_string=“./kube-join.info”<br>             cat 3559161 [001] 1710448.753530: probe:do_sys_open: (ffff800010368e20) filename_string=“/usr/share/locale/locale.alias”<br>             cat 3559161 [001] 1710448.753628: probe:do_sys_open: (ffff800010368e20) filename_string=“/usr/share/locale/en_US.UTF-8/LC_MESSAGES/libc.mo”<br>             cat 3559161 [001] 1710448.753637: probe:do_sys_open: (ffff800010368e20) filename_string=“/usr/share/locale/en_US.utf8/LC_MESSAGES/libc.mo”<br>             cat 3559161 [001] 1710448.753645: probe:do_sys_open: (ffff800010368e20) filename_string=“/usr/share/locale/en_US/LC_MESSAGES/libc.mo”<br>             cat 3559161 [001] 1710448.753652: probe:do_sys_open: (ffff800010368e20) filename_string=“/usr/share/locale/en.UTF-8/LC_MESSAGES/libc.mo”<br>             cat 3559161 [001] 1710448.753659: probe:do_sys_open: (ffff800010368e20) filename_string=“/usr/share/locale/en.utf8/LC_MESSAGES/libc.mo”<br>             cat 3559161 [001] 1710448.753665: probe:do_sys_open: (ffff800010368e20) filename_string=“/usr/share/locale/en/LC_MESSAGES/libc.mo”<br>             cat 3559161 [001] 1710448.753674: probe:do_sys_open: (ffff800010368e20) filename_string=“/usr/share/locale-langpack/en_US.UTF-8/LC_MESSAGES/libc.mo”<br>             cat 3559161 [001] 1710448.753683: probe:do_sys_open: (ffff800010368e20) filename_string=“/usr/share/locale-langpack/en_US.utf8/LC_MESSAGES/libc.mo”<br>             cat 3559161 [001] 1710448.753690: probe:do_sys_open: (ffff800010368e20) filename_string=“/usr/share/locale-langpack/en_US/LC_MESSAGES/libc.mo”<br>             cat 3559161 [001] 1710448.753698: probe:do_sys_open: (ffff800010368e20) filename_string=“/usr/share/locale-langpack/en.UTF-8/LC_MESSAGES/libc.mo”<br>             cat 3559161 [001] 1710448.753706: probe:do_sys_open: (ffff800010368e20) filename_string=“/usr/share/locale-langpack/en.utf8/LC_MESSAGES/libc.mo”<br>             cat 3559161 [001] 1710448.753715: probe:do_sys_open: (ffff800010368e20) filename_string=“/usr/share/locale-langpack/en/LC_MESSAGES/libc.mo”</p><p>如果只关心filename_string，可以使用 perf report --sort filename_string</p><p>root@jianlin-100:/home/jianlin# perf report --sort filename_string<br># To display the perf.data header info, please use --header/–header-only options.</p><p># Total Lost Samples: 0</p><p># Samples: 18  of event ‘probe:do_sys_open’<br># Event count (approx.): 18</p><p># Overhead                                               filename_string<br># …  …</p><p>5.56%                              “/usr/share/locale/locale.alias”<br>     5.56%                 “/usr/share/locale/en_US/LC_MESSAGES/libc.mo”<br>     5.56%            “/usr/share/locale/en_US.utf8/LC_MESSAGES/libc.mo”<br>     5.56%           “/usr/share/locale/en_US.UTF-8/LC_MESSAGES/libc.mo”<br>     5.56%                    “/usr/share/locale/en/LC_MESSAGES/libc.mo”<br>     5.56%               “/usr/share/locale/en.utf8/LC_MESSAGES/libc.mo”<br>     5.56%              “/usr/share/locale/en.UTF-8/LC_MESSAGES/libc.mo”<br>     5.56%        “/usr/share/locale-langpack/en_US/LC_MESSAGES/libc.mo”<br>     5.56%   “/usr/share/locale-langpack/en_US.utf8/LC_MESSAGES/libc.mo”<br>     5.56%  “/usr/share/locale-langpack/en_US.UTF-8/LC_MESSAGES/libc.mo”<br>     5.56%           “/usr/share/locale-langpack/en/LC_MESSAGES/libc.mo”<br>     5.56%      “/usr/share/locale-langpack/en.utf8/LC_MESSAGES/libc.mo”<br>     5.56%     “/usr/share/locale-langpack/en.UTF-8/LC_MESSAGES/libc.mo”<br>     5.56%                              “/usr/lib/locale/locale-archive”<br>     5.56%                                        “/proc/3559161/status”<br>     5.56%                            “/lib/aarch64-linux-gnu/libc.so.6”<br>     5.56%                                            “/etc/ld.so.cache”<br>     5.56%                                            “./kube-join.info”</p><p>对kernel modules的符号的操作，<br>以vxlan举例，perf probe -F 找不到vxlan的符号；</p><p>root@jianlin-100:/home/jianlin# perf probe -F |grep -i vxlan<br>root@jianlin-100:/home/jianlin#</p><p>这里需要-m flag ,指明module的路径：</p><p>root@jianlin-100:/home/jianlin# perf probe -m /lib/modules/5.10.0-rc3+/kernel/drivers/net/vxlan.ko -L vxlan_xmit</p><p>0  static netdev_tx_t vxlan_xmit(struct sk_buff *skb, struct net_device *dev)<br>         {<br>      2         struct vxlan_dev *vxlan = netdev_priv(dev);<br>                struct vxlan_rdst *rdst, *fdst = NULL;<br>                const struct ip_tunnel_info *info;<br>                bool did_rsc = false;<br>                struct vxlan_fdb *f;<br>                struct ethhdr *eth;<br>                __be32 vni = 0;</p><p>info = skb_tunnel_info(skb);<br>     12         skb_reset_mac_header(skb);</p><p>14         if (vxlan-&gt;cfg.flags &amp; VXLAN_F_COLLECT_METADATA) {<br>     15                 if (info &amp;&amp; info-&gt;mode &amp; IP_TUNNEL_INFO_BRIDGE &amp;&amp;</p><p>其它操作没有差别：</p><p>root@jianlin-100:/home/jianlin# perf probe -m /lib/modules/5.10.0-rc3+/kernel/drivers/net/vxlan.ko -a ‘vxlan_xmit dev-&gt;name:string’<br>Added new event:<br>  probe:vxlan_xmit     (on vxlan_xmit in vxlan with name=dev-&gt;name:string)</p><p>You can now use it in all perf tools, such as:</p><p>perf record -e probe:vxlan_xmit -aR sleep 1</p><p>root@jianlin-100:/home/jianlin# perf record -e  probe:vxlan_xmit -a ping -c  3 172.200.18.102<br>PING 172.200.18.102 (172.200.18.102) 56(84) bytes of data.<br>64 bytes from 172.200.18.102: icmp_seq=1 ttl=64 time=0.770 ms<br>64 bytes from 172.200.18.102: icmp_seq=2 ttl=64 time=0.878 ms<br>64 bytes from 172.200.18.102: icmp_seq=3 ttl=64 time=0.799 ms</p><p>— 172.200.18.102 ping statistics —<br>3 packets transmitted, 3 received, 0% packet loss, time 2003ms<br>rtt min/avg/max/mdev = 0.770/0.815/0.878/0.045 ms<br>[ perf record: Woken up 1 times to write data ]<br>[ perf record: Captured and wrote 0.194 MB perf.data (3 samples) ]<br>root@jianlin-100:/home/jianlin# perf report -n --sort name<br># To display the perf.data header info, please use --header/–header-only options.</p><p># Total Lost Samples: 0</p><p># Samples: 3  of event ‘probe:vxlan_xmit’<br># Event count (approx.): 3</p><p># Overhead       Samples        name<br># …  …  …</p><p>100.00%             3  “vxlan100”</p><p># Samples: 0  of event ‘dummy:HG’<br># Event count (approx.): 0</p><p># Overhead       Samples<br># …  …</p><p># (Tip: For a higher level overview, try: perf report --sort comm,dso)</p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>About</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
